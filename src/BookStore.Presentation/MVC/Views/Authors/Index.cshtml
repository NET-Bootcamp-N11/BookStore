@using BookStore.Domain.Entities
@model PaginationViewModel<Author>

<form id="searchForm" class="d-flex gap-2 mb-1" asp-controller="Authors" asp-action="Index" method="get">
    <input type="search" id="searchInput" class="form-control" aria-describedby="search" name="text" placeholder="Enter book name...">
</form>

<script>
    document.addEventListener('DOMContentLoaded', 
    function () {
        const savedQuery = localStorage.getItem('searchQuery');
        if (savedQuery) {
            document.getElementById('searchInput').value = savedQuery;
        }

        document.getElementById('searchInput').focus();

        document.getElementById('searchInput').addEventListener('input', function () {
            const inputValue = this.value.trim();
            localStorage.setItem('searchQuery', inputValue);
            document.getElementById('searchForm').submit();
        });
    });
</script>


@if (User.Identity.IsAuthenticated && !User.IsInRole("User"))
{
    <br />
    <a asp-controller="Authors" asp-action="Create" class="btn btn-primary" >
        <i class='bx bx-plus'></i>
    </a>
}

<hr />

<div class="mt-3 row row-cols-1 row-cols-md-3 g-4 justify-content-center">
    @foreach (var author in Model.Objects)
    {
        <div class="card mx-2" style="width: 18rem;">
            <img src="@author.PhotoPath" class="card-img-top" alt="...">
            <div class="card-body">
                <h5 class="card-title">@author.Name</h5>
            </div>

            @if (User.Identity.IsAuthenticated && User.IsInRole("SuperAdmin"))
            {  
                <div class="card-body">
                    <a href ="@Url.Action("Update", new { id = author.Id })" class="btn btn-warning">
                        Update</a>
                    <a a asp-controller="Authors" asp-action="Delete" asp-route-id="@author.Id" class="btn btn-danger">Delete</a>
                </div>
            }
        </div>
    }
</div>




 


<!-- Pagination controls -->
@if (Model.TotalPages > 1)
{
    <div style="display: flex; justify-content: center; align-items: center; gap: 5px">
        @if (Model.CurrentPage == 1)
        {
            <div class="btn btn-primary">1</div>
        }

        @if (Model.CurrentPage > 1)
        {
            <a class="btn btn-outline-primary" href="@Url.Action("Index", new { page = Model.CurrentPage - 1 })"><i class='bx bx-chevrons-left bx-burst'></i></a>
        }

        @if (Model.CurrentPage != 1)
        {
            <a class="btn btn-outline-primary" href="@Url.Action("Index", new { page = 1 })">1</a>
        }

        @if (Model.CurrentPage > 2)
        {
            <span>...</span>
        }

        @for (int i = Model.CurrentPage - 1; i <= Model.CurrentPage + 1 && i <= Model.TotalPages; i++)
        {
            if (i > 1 && i < Model.TotalPages)
            {
                if (i == Model.CurrentPage)
                {
                    <div class="btn btn-primary">@i</div>
                }
                else
                {
                    <a class="btn btn-outline-primary" href="@Url.Action("Index", new { page = i })">@i</a>
                }
            }
        }

        @if (Model.CurrentPage < Model.TotalPages - 1)
        {
            <span>...</span>
        }

        @if (Model.TotalPages != Model.CurrentPage && Model.TotalPages > 1)
        {
            <a class="btn btn-outline-primary" href="@Url.Action("Index", new { page = Model.TotalPages })">@Model.TotalPages</a>
        }

        @if (Model.CurrentPage < Model.TotalPages)
        {
            <a class="btn btn-outline-primary" href="@Url.Action("Index", new { page = Model.CurrentPage + 1 })"><i class='bx bx-chevrons-right bx-burst'></i></a>
        }

        @if (Model.CurrentPage == Model.TotalPages)
        {
            <div class="btn btn-primary">@Model.CurrentPage</div>
        }
    </div>
}